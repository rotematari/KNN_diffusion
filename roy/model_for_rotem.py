# -*- coding: utf-8 -*-
"""model for rotem

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A_xSOXYqc_eAIoXg-51wt-qQykR82NAu

    !pip install transformers
    !pip install diffusers
    !pip install ipyplot
    !pip install accelerate
"""




import torch
import torch.nn as nn
import numpy as np
import random as rn
import pickle
import torchvision
from accelerate import Accelerator
from torch.amp.autocast_mode import autocast
from diffusers import UNet2DModel,DDPMScheduler,DDPMPipeline
from transformers import get_cosine_schedule_with_warmup
from torch.utils.data import Dataset, DataLoader
import torchvision.transforms as transforms
import matplotlib.pyplot as plt
import ipyplot
from dataclasses import dataclass
import torch.nn.functional as F
import math
from tqdm.auto import tqdm





@dataclass
class TrainingConfig:
    image_size = 32  # the generated image resolution
    train_batch_size = 100
    eval_batch_size = 16  # how many images to sample during evaluation
    num_epochs = 1000
    gradient_accumulation_steps = 1
    learning_rate = 1e-4
    lr_warmup_steps = 500
    save_image_epochs = 10
    save_model_epochs = 30
    mixed_precision = 'fp16'  # `no` for float32, `fp16` for automatic mixed precision

    seed = 0





def train_loop(config, model, noise_scheduler, optimizer, train_dataloader, lr_scheduler,device='cpu'):
    # Initialize accelerator and tensorboard logging
    accelerator = Accelerator(
        mixed_precision=config.mixed_precision,
        gradient_accumulation_steps=config.gradient_accumulation_steps

    )

    # Prepare everything
    # There is no specific order to remember, you just need to unpack the
    # objects in the same order you gave them to the prepare method.
    model, optimizer, train_dataloader, lr_scheduler = accelerator.prepare(
        model, optimizer, train_dataloader, lr_scheduler
    )

    global_step = 0

    # Now you train the model
    for epoch in range(config.num_epochs):
        progress_bar = tqdm(total=len(train_dataloader), disable=not accelerator.is_local_main_process)
        progress_bar.set_description(f"Epoch {epoch}")
        epoch_losses=[]

        for step, (batch,lables) in enumerate(train_dataloader):
            clean_images = batch
            # Sample noise to add to the images
            noise = torch.randn(clean_images.shape).to(clean_images.device)
            bs = clean_images.shape[0]

            # Sample a random timestep for each image
            timesteps = torch.randint(0, noise_scheduler.num_train_timesteps, (bs,), device=clean_images.device).long()

            # Add noise to the clean images according to the noise magnitude at each timestep
            # (this is the forward diffusion process)
            noisy_images = noise_scheduler.add_noise(clean_images, noise, timesteps)

            with accelerator.accumulate(model):
                # Predict the noise residual
                noise_pred = model(noisy_images, timesteps, return_dict=False)[0]
                loss = F.mse_loss(noise_pred, noise)
                epoch_losses.append(loss.item())
                accelerator.backward(loss)

                accelerator.clip_grad_norm_(model.parameters(), 1.0)
                optimizer.step()
                lr_scheduler.step()
                optimizer.zero_grad()

            progress_bar.update(1)
            logs = {"loss": loss.detach().item(), "lr": lr_scheduler.get_last_lr()[0], "step": global_step}
            progress_bar.set_postfix(**logs)
            #accelerator.log(logs, step=global_step)
            global_step += 1
        print(f"avg epoch loss was {sum(epoch_losses)/len(epoch_losses)}")
        if (epoch+1)%200==0:
            pipeline = DDPMPipeline(unet=accelerator.unwrap_model(model), scheduler=noise_scheduler)

            with autocast(device_type=device,dtype=torch.float16):
                images=pipeline(batch_size=10).images
                ipyplot.plot_images(images,img_width=90)




def main():
    rn.seed(0)
    torch.manual_seed(0)
    cuda_check = input("if cuda number has been check press 1 :\n")

    if cuda_check != 1:
        print("check cuda !!")
        
        return 


    device = 'cuda:' if torch.cuda.is_available() else 'cpu'

    TRANSFORM = transforms.Compose(
        (transforms.ToTensor(), transforms.RandomHorizontalFlip(),transforms.Normalize([0.5], [0.5])))


    dataset = torchvision.datasets.CIFAR10(root='./data', train=True,
                                            download=True, transform=TRANSFORM)
    config = TrainingConfig()

    train_dataloader = DataLoader(dataset, batch_size=config.train_batch_size, shuffle=True)

    model = UNet2DModel(
        sample_size=config.image_size,  # the target image resolution
        in_channels=3,  # the number of input channels, 3 for RGB images
        out_channels=3,  # the number of output channels
        layers_per_block=2,  # how many ResNet layers to use per UNet block
        block_out_channels=(128, 256, 512),  # the number of output channes for each UNet block
        down_block_types=(
            "DownBlock2D",  # a regular ResNet downsampling block
            "AttnDownBlock2D",  # a ResNet downsampling block with spatial self-attention
            "AttnDownBlock2D",
        ),
        up_block_types=(
            "AttnUpBlock2D",  # a regular ResNet upsampling block
            "AttnUpBlock2D",  # a ResNet upsampling block with spatial self-attention
            "UpBlock2D"
        ),
    )

    noise_scheduler = DDPMScheduler(num_train_timesteps=1000)

    optimizer = torch.optim.AdamW(model.parameters(), lr=config.learning_rate)

    lr_scheduler = get_cosine_schedule_with_warmup(
        optimizer=optimizer,
        num_warmup_steps=config.lr_warmup_steps,
        num_training_steps=(len(train_dataloader) * config.num_epochs),
    )



    train_loop(config, model, noise_scheduler, optimizer, train_dataloader, lr_scheduler,device=device)

if __name__ == "__main__":

    main()
    
    
    
    