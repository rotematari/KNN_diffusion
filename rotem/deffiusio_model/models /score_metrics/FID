import torch.nn as nn
import torch
from inception import InceptionV3
from torchmetrics.image.fid import FrechetInceptionDistance
from torchvision import transforms 
import torchvision
fid = FrechetInceptionDistance(feature=64,normalize=True)

# generate two slightly overlapping image intensity distributions
"""
https://torchmetrics.readthedocs.io/en/stable/image/frechet_inception_distance.html

"""

# TODO: add loader to CIFAR10 to imgs_dist1 to tesnor with type torch.uint8)

data_transforms = [
        transforms.Resize((32, 32)),
        transforms.ToTensor(), # Scales data into [0,1] 
        # transforms.Lambda(lambda t: (t * 2) - 1) # Scale between [-1, 1] 
    ]
data_transform = transforms.Compose(data_transforms)

imgs_dist1 = torchvision.datasets.CIFAR10(root="/home/robotics20/Documents/deep/KNN_diffusion/rotem/deffiusio_model/data", download=True,
                                         train=True, 
                                         transform=data_transform)

data = imgs_dist1.data.reshape(-1,3,32,32)
data = torch.tensor(data)
# imgs_dist1 = torch.randint(0, 200, (100, 3, 299, 299), dtype=torch.uint8)
# TODO: add generated img tensor same size as CIFAR data set 
imgs_dist2 = torch.randint(0, 1, (50000, 3, 32, 32), dtype=torch.uint8)

fid.update(data, real=True)
fid.update(imgs_dist2, real=False)
fid = fid.compute()

print(fid)